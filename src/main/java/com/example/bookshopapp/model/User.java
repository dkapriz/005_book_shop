package com.example.bookshopapp.model;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Getter
@Setter
@Entity
@Table(name = "users")
@ApiModel(description = "data model of user entity")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    private Integer id;

    @Column(columnDefinition = "VARCHAR(255)", nullable = false)
    @ApiModelProperty("a hash of the user used for external identification of the user in order to hide his ID")
    private String hash;

    @Column(name = "reg_time", columnDefinition = "TIMESTAMP", nullable = false)
    @ApiModelProperty("date and time of registration")
    private LocalDateTime regTime;

    @Column(nullable = false)
    @ApiModelProperty("personal account balance, default 0")
    private Integer balance;

    @Column(columnDefinition = "VARCHAR(255)")
    @ApiModelProperty("username")
    private String name;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    private List<UserContact> userContacts;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Book2User> books;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Book2UserRecentlyView> recentlyViews;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BalanceTransaction> balanceTransactions;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<FileDownload> fileDownloads;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Message> messages;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BookReview> bookReviews;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BookReviewLike> bookReviewLikes;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BookEvaluation> bookEvaluations;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<YooCashOperation> yooCashOperations;

    public User(){
        this.regTime = LocalDateTime.now();
        this.hash = "";
    }
    public User(Integer id){
        this();
        this.id = id;
    }

    public User(String name){
        this();
        this.name = name;
    }

    @Override
    public int hashCode() {
        return id.hashCode() + name.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null || !this.getClass().equals(obj.getClass())){
            return false;
        }
        User user = (User)obj;
        return id.equals(user.id);
    }

    public void removeContact(UserContact contact){
        userContacts.remove(contact);
    }

    public UserContact getUserContact(String contactValue){
        for(UserContact contact : userContacts){
            if(contact.getContact().equals(contactValue)){
                return contact;
            }
        }
        return null;
    }
}
