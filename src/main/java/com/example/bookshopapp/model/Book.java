package com.example.bookshopapp.model;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.NaturalId;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Getter
@Setter
@Entity
@ApiModel(description = "data model of book entity")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    private Integer id;

    @Column(name = "pub_date", columnDefinition = "DATE", nullable = false)
    @ApiModelProperty("date of publication")
    private LocalDate pubDate;

    @Column(name = "is_bestseller", columnDefinition = "INT2", nullable = false)
    @ApiModelProperty("the book is very popular, is a bestseller")
    private byte isBestseller;

    @NaturalId
    @Column(columnDefinition = "VARCHAR(255)", nullable = false, unique = true)
    @ApiModelProperty("mnemonic ID of the book")
    private String slug;

    @Column(columnDefinition = "VARCHAR(255)", nullable = false)
    @ApiModelProperty("title of the book")
    private String title;

    @Column(columnDefinition = "VARCHAR(255)")
    @ApiModelProperty("cover image")
    private String image;

    @Column(columnDefinition = "TEXT")
    @ApiModelProperty("book description")
    private String description;

    @Column(nullable = false)
    @ApiModelProperty("the price in rubles is basic")
    private Integer price;

    @Column(columnDefinition = "INT2 DEFAULT 0", nullable = false)
    @ApiModelProperty("percentage discount or 0 if there is none")
    private byte discount;

    @Column(columnDefinition = "FLOAT8 DEFAULT 0", nullable = false)
    @ApiModelProperty("The rating of the book (from 1 to 5), if the book was not evaluated, is equal to 0")
    private Double rating;

    @Column(name = "popular_index", columnDefinition = "FLOAT8 DEFAULT 0", nullable = false)
    @ApiModelProperty("The rating of the book (from 1 to 5), if the book was not evaluated, is equal to 0")
    private Double popularIndex;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Book2Author> authors;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Book2User> users;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Book2UserRecentlyView> recentlyViews;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BalanceTransaction> balanceTransactions;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<FileDownload> fileDownloads;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BookReview> bookReviews;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BookEvaluation> bookEvaluations;

    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<BookFile> bookFiles;

    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)
    @JoinTable(name = "book2genre", joinColumns = {@JoinColumn(name = "book_id")},
            inverseJoinColumns = {@JoinColumn(name = "genre_id")})
    private Set<Genre> genres;

    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)
    @JoinTable(name = "tag2book", joinColumns = {@JoinColumn(name = "book_id")},
            inverseJoinColumns = {@JoinColumn(name = "tag_id")})
    private Set<Tag> tags;

    public Book() {
        authors = new ArrayList<>();
        users = new ArrayList<>();
        recentlyViews = new ArrayList<>();
        balanceTransactions = new ArrayList<>();
        fileDownloads = new ArrayList<>();
        bookReviews = new ArrayList<>();
        bookEvaluations = new ArrayList<>();
        genres = new HashSet<>();
        tags = new HashSet<>();
        bookFiles = new ArrayList<>();
        rating = 0.0;
    }

    public void addTag(Tag tag) {
        tags.add(tag);
        tag.getBooks().add(this);
    }

    public void addGenre(Genre genre) {
        genres.add(genre);
        genre.getBooks().add(this);
    }

    public void removeTag(Tag tag) {
        tags.remove(tag);
        tag.getBooks().remove(this);
    }

    public void removeGenre(Genre genre) {
        genres.remove(genre);
        genre.getBooks().remove(this);
    }

    public boolean getIsBestseller() {
        return isBestseller == 1;
    }
}